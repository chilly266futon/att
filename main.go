package main

import (
	"att/grade3"
	"fmt"
)

func main() {
	//TIP Дан массив продукции, выбранной запросом из БД, в виде массива карт с ключами "id" и "name". Преобразовать его в карту с доступом по id. Вывести название продукции с id = 1006.
	grade3.Task41()

	//TIP Дана строка abcdefghijklmnopqrstuvwxyz. Написать функцию, реализующую элементарный алгоритм шифрования: 1 - разделить её на равные части, 2 - в чётных отрезках переставить символы в обратном порядке, 3 - склеить всё в строку. Условия: полученную строку можно раскодировать той же функцией. Увеличьте сложность шифрования без изменения функции.
	input := "abcdefghijklmnopqrstuvwxyz"

	encrypted := grade3.Task42(input)
	fmt.Println("Зашифрованная строка:", encrypted)

	decrypted := grade3.Task42(encrypted)
	fmt.Println("Расшифрованная строка:", decrypted)

	//TIP Некий фреймворк использует в модели функцию fields(), которая возвращает массив полей модели. Эмулировать ситуацию, когда в GET приходит параметр fields, содержащий строку, в которой через запятую перечислены требуемые поля. Написать функцию requiredFields(), которая будет возвращать массив требуемых полей, которые существуют в модели
	grade3.Task43()

	//TIP Написать функцию-валидатор, которая преобразует переданное значение в соответствии с шаблоном регулярного выражения. На базе её написать валидаторы имени (разрешены русские, английские буквы, -, ` и пробел) и символьного кода (разрешены английские буквы, цифры, -, _)
	grade3.Task5()

	grade3.Task6()
}
